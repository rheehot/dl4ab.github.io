{
    "version": "https://jsonfeed.org/version/1",
    "title": "딥백수 • All posts by \"go\" tag",
    "description": "우리는 '지속가능한 백수질'을 지향합니다. 고로 외롭게 공부하고 있을 당신을 응원합니다. 딥러닝에 관련된 글 뿐만 아니라, 백수생활의 넋두리도 환영합니다.",
    "home_page_url": "https://dl4ab.github.io",
    "items": [
        {
            "id": "https://dl4ab.github.io/2020/08/21/Go-wire-dependency-injection-tutorial/",
            "url": "https://dl4ab.github.io/2020/08/21/Go-wire-dependency-injection-tutorial/",
            "title": "Go Dependency Injection Tutorial (feat. Wire)",
            "date_published": "2020-08-21T15:15:25.000Z",
            "content_html": "<p>Dependency Injection(DI)을 한국어로 의존성 주입이라고도 하지만 실제로는 DI라고 했을때 우리는 DI Framework/Library 를 의미합니다. 우선 Dependency Injection 이 무엇인지 에 대해 설명하겠습니다.</p>\n<p>예를 들어 <code>PostService</code> 는 블로그 포스트를 작성해주는 서비스가 있다고 가정합니다.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> PostService <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  CreatePost(Post) Post</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>이때 우리는 블로그 포스트를 데이터베이스에 저장하고 싶습니다. 그러기 위해서 <code>CreatePost(Post)</code> 함수 안에서</p>\n<ol>\n<li>데이터베이스에 연결하고</li>\n<li>Post 를 INSERT 한다.</li>\n</ol>\n<p>이런식으로 할 수 도 있습니다. 하지만 이런식으로 하기보다는 비지니스 로직과 데이터베이스를 다루는 코드를 분리하여 데이터베이스에 저장하는 코드는 <code>PostRepository</code> 에 대행시킬 것입니다.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> PostRepository <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">  StorePost(Post) <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/08/21/Go-wire-dependency-injection-tutorial/architecture.jpg\" alt=\"Architecture\" /></p>\n<p>즉 보시다싶이 <code>PostService</code> 가 <code>PostRepository</code> 에 의존하고 있습니다.<br />\n그러면 <code>PostService</code> 를 생성하기 위해 다음과 같은 코드를 작성할 것입니다.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewPostService</span><span class=\"params\">(repo PostRepository)</span> <span class=\"title\">PostService</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;postService&#123;</span><br><span class=\"line\">\t\tRepo: repo,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>이게 Dependency Injection 입니다. 이때 만약 Postgres가 아니라 Sqlite 나 심지어 메모리에 저장하고 싶으면 어떻게 될까요? 그에 해당하는 PostRepository 객체를 바꿔껴주기만 하면 됩니다.</p>\n<p><img src=\"/2020/08/21/Go-wire-dependency-injection-tutorial/different_repository.svg\" alt=\"InMemoryPostRepository\" /></p>\n<p>이렇게 의존성이 간단하면 Dependency Injection 프레임워크가 없더라도 손으로 Dependency Injection 설계도 가능합니다. 하지만 이렇게 의존하는 서비스가 많아진다면?</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewPostService</span><span class=\"params\">(someService SomeService, otherService OtherService, repo PostRepository, ...)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.go</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  otherSerivce := NewOtherService(<span class=\"string\">\"secret\"</span>)</span><br><span class=\"line\">  someService := NewSomeService(otherService)</span><br><span class=\"line\">  postRepository := NewPostRepository(<span class=\"string\">\"dburl\"</span>)</span><br><span class=\"line\">  potService := NewPostService(someService, otherService, postRepository)</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>일일히 손으로 바꿔주는게 매우 귀찮고 손이 많이갑니다. 순서도 맞춰줘야 되고 argument 위치나 귀찮은게 한두가지가 아닙니다. 이걸 자동으로 해주는 것이 바로 Dependency Injection Framework 이고 Go 에서는 <a href=\"https://github.com/google/wire\" target=\"_blank\" rel=\"noopener\">wire</a> 와 <a href=\"https://github.com/uber-go/fx\" target=\"_blank\" rel=\"noopener\">fx</a> 가 있습니다.</p>\n<h2 id=\"준비물\"><a class=\"markdownIt-Anchor\" href=\"#준비물\"></a> 준비물</h2>\n<p>여기서는 구글의 <a href=\"https://github.com/google/wire\" target=\"_blank\" rel=\"noopener\">wire</a> 를 사용하도록 하겠습니다.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/google/wire/cmd/wire</span><br></pre></td></tr></table></figure>\n<h2 id=\"프로젝트-구조\"><a class=\"markdownIt-Anchor\" href=\"#프로젝트-구조\"></a> 프로젝트 구조</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── cmd</span><br><span class=\"line\">│   └── server.go</span><br><span class=\"line\">├── go.mod</span><br><span class=\"line\">├── go.sum</span><br><span class=\"line\">├── module</span><br><span class=\"line\">│   └── wire.go</span><br><span class=\"line\">└── post</span><br><span class=\"line\">    ├── postrepository.go</span><br><span class=\"line\">    └── postservice.go</span><br><span class=\"line\"></span><br><span class=\"line\">3 directories, 6 files</span><br></pre></td></tr></table></figure>\n<p>각 <code>postservice.go</code> 와 <code>postrepository.go</code> 파일은 이전에서 본것과 동일합니다.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// postservice.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> post</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (skip)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// PostService 를 생성하는 factory function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewPostService</span><span class=\"params\">(repository PostRepository)</span> *<span class=\"title\">PostService</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;PostService&#123;Repo: repository&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// postrepository.go</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> post</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> PostRepository <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tStorePost(Post) <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> InMemoryPostRepository <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tcache <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]Post</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(i *InMemoryPostRepository)</span> <span class=\"title\">StorePost</span><span class=\"params\">(post Post)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\ti.cache[post.id] = post</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 인메모리 포스트리포지토리를 생성하는 팩토리 함수</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewInMemoryPostRepository</span><span class=\"params\">()</span> <span class=\"title\">PostRepository</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;InMemoryPostRepository&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>이제 <code>module/wire.go</code> 파일은 다음과 같습니다.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//+build wireinject  &lt;--- 매우 중요</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> module</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"example/post\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"github.com/google/wire\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">InitializePostService</span><span class=\"params\">()</span> *<span class=\"title\">post</span>.<span class=\"title\">PostService</span></span> &#123;</span><br><span class=\"line\">\twire.Build(post.NewInMemoryPostRepository, post.NewPostService) <span class=\"comment\">// &lt;-- Factory 함수들</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;post.PostService&#123;&#125; <span class=\"comment\">// &lt;-- Return Type을 마추기 위한 더미로 중요하지 않음</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>이제 shell 에서 <code>wire</code> 커맨드를 치면 코드가 생성이 됩니다.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wire module/wire.go</span><br></pre></td></tr></table></figure>\n<p>아래는 생성된 코드입니다. <code>PostRepository</code> 와 <code>PostService</code> 가 올바른 순서로 생성된 것을 볼 수 있습니다.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">InitializePostService</span><span class=\"params\">()</span> *<span class=\"title\">post</span>.<span class=\"title\">PostService</span></span> &#123;</span><br><span class=\"line\">\tpostRepository := post.NewInMemoryPostRepository()</span><br><span class=\"line\">\tpostService := post.NewPostService(postRepository)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> postService</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>자세한 내용은 <a href=\"https://bit.ly/2Sqdnws\" target=\"_blank\" rel=\"noopener\">https://bit.ly/2Sqdnws</a> 에 참여하셔서 문의주세요 😄</p>\n",
            "tags": [
                "Mo Kweon",
                "go",
                "golang",
                "dependency injection",
                "wire",
                "uber-go",
                "fx"
            ]
        },
        {
            "id": "https://dl4ab.github.io/2020/08/17/slack-bot/",
            "url": "https://dl4ab.github.io/2020/08/17/slack-bot/",
            "title": "슬랙봇 Distribute 가능하게 만들기 (OAuth)",
            "date_published": "2020-08-17T08:32:54.000Z",
            "content_html": "<p>딥백수에는 여러 슬랙봇들이 상주하고 있습니다.</p>\n<p><img src=\"/2020/08/17/slack-bot/timebot_demo.png\" alt=\"캘리포니아/한국 시간 변환해주는 timebot\" /></p>\n<p>이렇게 만들어 둔 봇이 유용해서 다른 슬랙 workspace 에서 사용하고 싶을 때가 있습니다. 그러기 위해 distribute 가능하게 봇을 작성해야 합니다. 그러기 위해 OAuth를 사용해야 합니다.</p>\n<h2 id=\"oauth-란\"><a class=\"markdownIt-Anchor\" href=\"#oauth-란\"></a> OAuth 란?</h2>\n<p>OAuth는 엑세스를 관리하는 방법중에 표준으로 사용되는 방법입니다. A라는 애플리케이션에서 B사이트의 유저 정보가 필요하다면 B사이트로 OAuth Request 를 보내는 방식입니다.</p>\n<p>여기서 슬랙봇이 A 애플리케이션이고 슬랙이 B에 해당합니다.</p>\n<h2 id=\"실제-slack-작동-구조\"><a class=\"markdownIt-Anchor\" href=\"#실제-slack-작동-구조\"></a> 실제 Slack 작동 구조</h2>\n<p><img src=\"https://a.slack-edge.com/fbd3c/img/api/articles/oauth_scopes_tutorial/slack_oauth_flow_diagram.png\" alt=\"OAuth\" /></p>\n<p>위 그림에서 구현해야 될게 많은 것으로 보이지만 실제로 <code>GET /api/oauth?code=XXXXX</code> 엔드포인트를 서버에 만들어주고 토큰을 저장할 데이터베이스만 있으면 완성입니다.</p>\n<p>예를 들어, 유저가 <a href=\"https://slack.com/oauth/v2/authorize?client_id=288745980535.515443770183&scope=channels:history,channels:join,channels:read,chat:write,chat:write.customize,chat:write.public,commands,dnd:read,emoji:read,groups:history,groups:read,groups:write,im:history,im:read,im:write,links:read,links:write,mpim:history,mpim:read,mpim:write,pins:read,pins:write,reactions:read,reactions:write,reminders:read,reminders:write,remote_files:read,remote_files:share,remote_files:write,team:read,usergroups:read,usergroups:write,users.profile:read,users:read,users:read.email,users:write,app_mentions:read&user_scope=\" target=\"_blank\" rel=\"noopener\"><img alt=\"Add to Slack\" height=\"40\" width=\"139\" src=\"https://platform.slack-edge.com/img/add_to_slack.png\" srcSet=\"https://platform.slack-edge.com/img/add_to_slack.png 1x, https://platform.slack-edge.com/img/add_to_slack@2x.png 2x\" /></a> 이 버튼을 누르고 동의를 하게 되면 timebot 서버로 GET /api/oauth?code=XXXX 리퀘스트를 보내게 됩니다. (step 2 에 해당)</p>\n<p>그럼 이 code=XXX 를 사용하여 슬랙 서버에 OAuth 요청을 보내고(step 3) 받은 토큰을 데이터베이스에 저장해주면 됩니다 (step 4).</p>\n<p>수도 코드는 아래와 같이 되어 있습니다.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">OauthHandler</span><span class=\"params\">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// GET ?code=XXXX 읽음</span></span><br><span class=\"line\">  code, ok := request.URL.Query()[<span class=\"string\">\"code\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// CODE를 보냄 (POST https://api.slack.com/methods/oauth.v2.access)</span></span><br><span class=\"line\">  resp, err := getOAuthV2Response(slackClientId, slackClientSecret, code[<span class=\"number\">0</span>], <span class=\"string\">\"\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// TeamID 및 AccessToken 저장</span></span><br><span class=\"line\">  store(resp.TeamID, resp.AccessToken)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ... send ok response</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>POST https://api.slack.com/methods/oauth.v2.access</code> 의 예시 response</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"ok\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"access_token\"</span>: <span class=\"string\">\"xoxb-17653672481-19874698323-pdFZKVeTuE8sk7oOcBrzbqgy\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"token_type\"</span>: <span class=\"string\">\"bot\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scope\"</span>: <span class=\"string\">\"commands,incoming-webhook\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"bot_user_id\"</span>: <span class=\"string\">\"U0KRQLJ9H\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"app_id\"</span>: <span class=\"string\">\"A0KRD7HC3\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"team\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Slack Softball Team\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"T9TK3CUKW\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"enterprise\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"slack-sports\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"E12345678\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"authed_user\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"U1234\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"scope\"</span>: <span class=\"string\">\"chat:write\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"access_token\"</span>: <span class=\"string\">\"xoxp-1234\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"token_type\"</span>: <span class=\"string\">\"user\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>이때 TeamID(workspace) 와 코드를 함께 저장해주면 나중에 유저 메시지로부터 반응하는 봇을 만들때 유저 메시지에 포함된 TeamID를 읽어 Access Token 을 DB에서 불러오는 식으로 사용합니다.</p>\n<p><img src=\"/2020/08/17/slack-bot/timebot_sequential.svg\" alt=\"timebot 순서도\" /></p>\n<p>자세한 내용은 <a href=\"https://bit.ly/2Sqdnws\" target=\"_blank\" rel=\"noopener\">https://bit.ly/2Sqdnws</a> 에 참여하셔서 문의주세요 😄</p>\n",
            "tags": [
                "Mo Kweon",
                "go",
                "slack",
                "bot",
                "oauth"
            ]
        }
    ]
}